1. CREATE A NEW KEY & ADD IT TO NEW KEYSTORE "rxjaco9_keystore" using alias "rxjaco9_alias"
 
keytool -genkey -keystore ./rxjaco9_keystore -alias rxjaco9_alias -validity 730 -keyalg RSA -keysize 2048 -dname "CN=XIN009CDRXJACO9.dhcp.intranet,OU=Enterprise Test Support, O=Centurylink, L=Denver, ST=Colorado, C=US"
 
As per your liking you can change the name of the keystore, alias, values of CN,OU, O,L,ST & C 



keytool -genkey -keystore ./rxjaco9_keystore -alias rxjaco9 -validity 730 -keyalg RSA -keysize 2048 -dname "CN=XIN009OLAB40286.dhcp.intranet,OU=EPWF, O=Centurylink, L=Denver, ST=Colorado, C=US"



keytool -genkey -keystore ./bharat_keystore -alias bharat -validity 730 -keyalg RSA -keysize 2048 -dname "CN=XIN009OLAB40286.dhcp.intranet,OU=EPWF, O=Centurylink, L=Denver, ST=Colorado, C=US"

keytool -export -alias bharat -rfc -keystore ./bharat_keystore > ./bharat.cert 

keytool -import -alias bharat -file ./bharat.cert -keystore ./bharat_keystore 
===========================================================================
This needs to be used
===========================================================================

keytool -genkey -keystore ./bharat_keystore -alias bharat -validity 730 -keyalg RSA -keysize 2048 -dname "CN=XIN009OLAB40286.dhcp.intranet,OU=EPWF, O=Centurylink, L=Denver, ST=Colorado, C=US"

keytool -export -alias bharat -rfc -keystore ./bharat_keystore > ./bharat.cert

keytool -import -alias rxdec16trial1 -file ./dopsdv011.cert -keystore ./bharat_truststore

==========================================================================
Generating the Certificate at localhost
==========================================================================
1.Mozilla Firefox
2.Click on lock icon
3.More info
4.Go to Security
5.View certificate
6.Details certificate
7.Export Certificate
==========================================================================



==========================================================================
Commands to get the certs from smtp.gmail.host from open ssl
==========================================================================
1.Download SSL
2.Go to Bin Directory
3. Execute below comments
	1. TLS
		Some servers require TLS instead of straight SSL.  
		There isn't much difference except for the method used with OpenSSL to retrieve the server's certificate. 
		As an example, GMail allows TLS connections over port 587. 
		The OpenSSL command would be the following:

			s_client -connect smtp.gmail.com:587 -starttls smtp
	2.SSL
	
		s_client -connect smtp.gmail.com:465
		
		
==========================================================================		



==========================================================================
LISTING ALL THE CERTS
==========================================================================
keytool -list -keystore "%JAVA_HOME%/jre/lib/security/cacerts"
==========================================================================


==========================================================================
IMPORTING CERTS TO THE KEYSTORE FILE
==========================================================================

1.keytool -import -noprompt -trustcacerts -alias <AliasName> -file   <certificate> -keystore <KeystoreFile> -storepass <Password>
2.keytool –import –noprompt –trustcacerts –alias ALIASNAME -file FILENAME_OF_THE_INSTALLED_CERTIFICATE -keystore PATH_TO_CACERTS_FILE -storepass PASSWORD

JAVA 7

3.keytool –importcert –trustcacerts –alias ALIASNAME -file PATH_TO_FILENAME_OF_THE_INSTALLED_CERTIFICATE -keystore PATH_TO_CACERTS_FILE -storepass changeit
4.keytool -import -v -trustcacerts -alias <your domain> -file ~/<your domain>.crt -keystore <JAVA HOME>/jre/lib/security/cacerts -keypass changeit -storepass changeit
		1. replace <your domain> with your domain (e.g. jossef.com)
		2. replace <JAVA HOME> with your java home directory
		
		3. Even though iv'e installed my certificate in Java's default certificate stores, Tomcat ignores that (seems like it's not configured to use Java's default certificate stores).

			To hack this, add the following somewhere in your code:
			String certificatesTrustStorePath = "<JAVA HOME>/jre/lib/security/cacerts";
			System.setProperty("javax.net.ssl.trustStore", certificatesTrustStorePath);


5.keytool -import -alias example -keystore  C:\Program Files (x86)\Java\jre1.6.0_22\lib\security\cacerts -file example.der
6.keytool -import -alias _alias_name_ -keystore ..\lib\security\cacerts -file _path_to_cer_file
	It will ask for a password. By default the password is “changeit”. If the password is different you may not be able to import the certificate.
	

6.keytool -import -alias _alias_name_ -keystore ..\lib\security\cacerts -file _path_to_cer_file

7.keytool -import -alias mailgate_uswc_uswest_com_tls -keystore "%JAVA_HOME%/jre/lib/security/cacerts" -file ./mailgate_uswc_uswest_com_tls.

=================================================

keytool -import -alias jenkins -keystore /epwf1/tools/jdk1.7.0_131/jre/lib/security/cacerts" -file jenkins.cert

 keytool -import -alias devops -keystore "/epwf1/tools/jdk1.7.0_131/jre/lib/security/cacerts" -file dopsdv011.cert
================================

keytool -delete -alias jenkins -keystore /epwf1/ci/jenkins/config/QwestCA.jks
keytool -import -alias jenkins -keystore /epwf1/ci/tools/java/java-1.8.0-oracle-1.8.0.91.x86_64/jre/lib/security/cacerts -file dopsdv011.cert
keytool -import -alias jenkins_cert -keystore /epwf1/ci/tools/java/java-1.8.0-oracle-1.8.0.91.x86_64/jre/lib/security/cacerts -file jenkins.cert

keytool -import -alias jenkins -keystore /epwf1/tools/jdk1.7.0_131/jre/lib/security/cacerts -file dopsdv011.cert
keytool -import -alias jenkins_cert -keystore /epwf1/tools/jdk1.7.0_131/jre/lib/security/cacerts -file jenkins.cert

keytool -list -v -keystore /epwf1/ci/tools/java/java-1.8.0-oracle-1.8.0.91.x86_64/jre/lib/security/cacerts >  java_cacerts.txt
keytool -list -v -keystore /epwf1/tools/jdk1.7.0_131/jre/lib/security/cacerts >  jdj1.7_certs.txt

=======================

